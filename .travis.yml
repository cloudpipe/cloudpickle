language: python
dist: xenial

matrix:
  include:
    - os: windows
      language: sh
      env: PYTHON_ROOT="/c/Python37" PYTHON_CHOCO_PKG="python3"
    - os: windows
      language: sh
      env: PYTHON_ROOT="/c/Python27" PYTHON_CHOCO_PKG="python2"
    - os: linux
      dist: trusty
      python: "pypy3"
    - os: linux
      python: 3.7
    - os: linux
      python: 3.6
    - os: linux
      python: 3.5
    - os: linux
      python: 2.7
    - os: linux
      # The PROJECT environment variable refers to a downstream project that
      # depends on cloudpickle (for example: distributed, joblib, loky). For
      # each project, a matrix item is created, that will run the $PROJECT
      # test suite with the latest cloudpickle, to check for breaking changes
      # introduced by cloudpickle.
      # Side note: for distributed, the pytest major version is constrained to
      # 3 because running it's test suite with pytest 4 fails for now. Also,
      # two failing tests related to openssl and not to cloudpickle are
      # skipped
      python: 3.7
      sudo: required
      env: PROJECT=distributed
           TEST_REQUIREMENTS="pytest==3.6 numpy pandas mock bokeh"
           PROJECT_URL=https://github.com/dask/distributed.git
           PYTEST_ARGS="-k not test_connection_args and not test_listen_args"
      if: commit_message =~ /(\[ci downstream\]|\[ci distributed\])/
    - os: linux
      env: PROJECT=loky TEST_REQUIREMENTS="pytest psutil"
           PROJECT_URL=https://github.com/tomMoral/loky.git
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci loky\])/
    - os: linux
      env: PROJECT=joblib TEST_REQUIREMENTS="pytest numpy distributed"
           PROJECT_URL=https://github.com/joblib/joblib.git
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci joblib\])/
    - os: linux
      env: PROJECT=ray
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci ray\])/
      install:
        - pip install --upgrade -r dev-requirements.txt
        - pip install setproctitle psutil ray==0.6.4
        - PROJECT_DIR="$(python -c "import os, ray; print(os.path.dirname(ray.__file__), flush=True)")"
        - rm $PROJECT_DIR/cloudpickle/cloudpickle.py
        - cp cloudpickle/cloudpickle.py $PROJECT_DIR/cloudpickle/cloudpickle.py
      script:
        - COVERAGE_PROCESS_START="$TRAVIS_BUILD_DIR/.coveragerc" PYTHONPATH='.:tests' pytest -r s
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_simple_serialization
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_complex_serialization
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_ray_recursive_objects
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_serialization_final_fallback
        - pytest -vl $PROJECT_DIR/tests/test_recursion.py

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        choco install -y $PYTHON_CHOCO_PKG;
        export PATH="$PYTHON_ROOT:$PYTHON_ROOT/Scripts:$PATH";
        python -m pip install --upgrade pip;
    fi
install:
  - pip install .
  - pip install --upgrade -r dev-requirements.txt
  - pip install tornado
  - if [[ $TRAVIS_PYTHON_VERSION != 'pypy'* ]]; then
        pip install numpy scipy;
    fi
  - if [[ $PROJECT != "" ]]; then
        pip install $TEST_REQUIREMENTS;
        pushd ..;
        git clone $PROJECT_URL;
        if [[ $PROJECT == "joblib" ]]; then
            pushd joblib/joblib/externals;
            source vendor_cloudpickle.sh ../../../cloudpickle;
            popd;
        fi;
        pip install ./$PROJECT;
        popd;
    fi
  - pip list
before_script:
  # stop the build if there are Python syntax errors or undefined names
  - flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics
  # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide
  - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  - python ci/install_coverage_subprocess_pth.py
script:
  - COVERAGE_PROCESS_START="$TRAVIS_BUILD_DIR/.coveragerc" PYTHONPATH='.:tests' pytest -r s
  - |
    if [[ $PROJECT != "" ]]; then
      pushd ../$PROJECT
      # pytest hangs if given an empty quoted string (it will happen
      # if PYTEST_ARGS was not defined) so we have to split the cases.
      if [[ "$PYTEST_ARGS" != "" ]]; then
        pytest -vl "$PYTEST_ARGS"
      else
        pytest -vl
      fi
      TEST_RETURN_CODE=$?
      popd
      if [[ "$TEST_RETURN_CODE" != "0" ]]; then
        exit $TEST_RETURN_CODE
      fi
    fi
after_success:
  - coverage combine --append
  - codecov
