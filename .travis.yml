language: python
dist: xenial

matrix:
  include:
    - os: windows
      language: sh
      env: PYTHON_ROOT="/c/Python37" PYTHON_CHOCO_PKG="python3"
    - os: windows
      language: sh
      env: PYTHON_ROOT="/c/Python27" PYTHON_CHOCO_PKG="python2"
    - os: linux
      dist: trusty
      python: "pypy3"
    - os: linux
      env: PYTHON_NIGHTLY=1
      if: commit_message =~ /\[ci python-nightly\]/
      python: 3.7
    - os: linux
      python: 3.7
    - os: linux
      python: "3.8-dev"
    - os: linux
      python: 3.6
    - os: linux
      python: 3.5
    - os: linux
      python: 2.7
    - os: linux
      # The PROJECT environment variable refers to a downstream project that
      # depends on cloudpickle (for example: distributed, joblib, loky). For
      # each project, a matrix item is created, that will run the $PROJECT
      # test suite with the latest cloudpickle, to check for breaking changes
      # introduced by cloudpickle.
      # The tests ignored by the negative -k flag are known to also be flaky on
      # the main dask-distributed CI servers with stable versions of cloudpickle.
      python: 3.7
      sudo: required
      env: PROJECT=distributed
           TEST_REQUIREMENTS="pytest pytest-timeout numpy pandas mock bokeh fsspec>=0.3.3"
           PROJECT_URL=https://github.com/dask/distributed.git
           PYTEST_ADDOPTS="--timeout-method=thread --timeout=300 -m \"not avoid_travis\" -k \"not test_dask_scheduler and not test_workspace_concurrency and not test_defaults and not test_service_hosts and not test_logging_file_config and not test_hostport and not test_workdir_simple and not test_two_workspaces_in_same_directory and not test_recompute_released_results and not test_connection_args and not test_listen_args\""
      if: commit_message =~ /(\[ci downstream\]|\[ci distributed\])/
    - os: linux
      env: PROJECT=loky TEST_REQUIREMENTS="pytest psutil"
           PROJECT_URL=https://github.com/tomMoral/loky.git
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci loky\])/
    - os: linux
      env: PROJECT=joblib TEST_REQUIREMENTS="pytest numpy distributed"
           PROJECT_URL=https://github.com/joblib/joblib.git
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci joblib\])/
    - os: linux
      env: PROJECT=ray
      python: 3.7
      if: commit_message =~ /(\[ci downstream\]|\[ci ray\])/
      install:
        - pip install --upgrade -r dev-requirements.txt
        - pip install setproctitle psutil ray==0.6.4
        - PROJECT_DIR="$(python -c "import os, ray; print(os.path.dirname(ray.__file__), flush=True)")"
        - rm $PROJECT_DIR/cloudpickle/cloudpickle.py
        - cp cloudpickle/cloudpickle.py $PROJECT_DIR/cloudpickle/cloudpickle.py
      script:
        - COVERAGE_PROCESS_START="$TRAVIS_BUILD_DIR/.coveragerc" PYTHONPATH='.:tests' pytest -r s
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_simple_serialization
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_complex_serialization
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_ray_recursive_objects
        - pytest -vl $PROJECT_DIR/tests/test_basic.py::test_serialization_final_fallback
        - pytest -vl $PROJECT_DIR/tests/test_recursion.py

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        choco install -y $PYTHON_CHOCO_PKG;
        export PATH="$PYTHON_ROOT:$PYTHON_ROOT/Scripts:$PATH";
        python -m pip install --upgrade pip;
    fi
  - if [[ "$PYTHON_NIGHTLY" == 1 ]]; then
        export VENV_DIR="$HOME/python38";
        pushd ..;
        git clone https://github.com/python/cpython.git;
        pushd cpython;
        ./configure;
        make;
        ./python -m venv "$VENV_DIR";
        popd;
        popd;
        export PYTHON_EXE="$VENV_DIR/bin/python";
    else
        export PYTHON_EXE="python";
    fi

install:
  - $PYTHON_EXE -m pip install .
  - $PYTHON_EXE -m pip install --upgrade -r dev-requirements.txt
  - $PYTHON_EXE -m pip install tornado
  - |
    if [[ $TRAVIS_PYTHON_VERSION != 'pypy'* ]]; then
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.8-dev" ]] || [[ "$PYTHON_NIGHTLY" == "1" ]]; then
            # installing scipy from pip builds it from source; thus we need to
            # install blas implementation on our system. This ought to be
            # deleted once scipy has proper binary wheels for 3.8
            if [[ $TRAVIS_OS_NAME == "linux" ]]; then
                sudo apt-get install libopenblas-dev
                $PYTHON_EXE -m pip install numpy scipy
            fi
        else
            $PYTHON_EXE -m pip install numpy scipy
        fi
    fi
  - if [[ $PROJECT != "" ]]; then
        $PYTHON_EXE -m pip install $TEST_REQUIREMENTS;
        pushd ..;
        git clone $PROJECT_URL;
        if [[ $PROJECT == "joblib" ]]; then
            pushd joblib/joblib/externals;
            source vendor_cloudpickle.sh ../../../cloudpickle;
            popd;
        fi;
        $PYTHON_EXE -m pip install ./$PROJECT;
        popd;
    fi
  - $PYTHON_EXE -m pip list
before_script:
  # stop the build if there are Python syntax errors or undefined names
  - $PYTHON_EXE -m flake8 . --count --verbose --select=E901,E999,F821,F822,F823 --show-source --statistics
  # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide
  - $PYTHON_EXE -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  - $PYTHON_EXE ci/install_coverage_subprocess_pth.py
script:
  - COVERAGE_PROCESS_START="$TRAVIS_BUILD_DIR/.coveragerc" PYTHONPATH='.:tests' $PYTHON_EXE -m pytest -r s
  - |
    if [[ $PROJECT != "" ]]; then
      pushd ../$PROJECT
      $PYTHON_EXE -m pytest -vl
      TEST_RETURN_CODE=$?
      popd
      if [[ "$TEST_RETURN_CODE" != "0" ]]; then
        exit $TEST_RETURN_CODE
      fi
    fi
after_success:
  - pip install coverage codecov
  - coverage combine --append
  - codecov
